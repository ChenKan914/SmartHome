// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class MessageBase;
class MessageBaseDefaultTypeInternal;
extern MessageBaseDefaultTypeInternal _MessageBase_default_instance_;
class MessageBody;
class MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class MessageRoomInfo;
class MessageRoomInfoDefaultTypeInternal;
extern MessageRoomInfoDefaultTypeInternal _MessageRoomInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MessageBase* Arena::CreateMaybeMessage<::MessageBase>(Arena*);
template<> ::MessageBody* Arena::CreateMaybeMessage<::MessageBody>(Arena*);
template<> ::MessageHeader* Arena::CreateMaybeMessage<::MessageHeader>(Arena*);
template<> ::MessageRoomInfo* Arena::CreateMaybeMessage<::MessageRoomInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageHeader_MessageType : int {
  MessageHeader_MessageType_LOGIN_REQ = 0,
  MessageHeader_MessageType_LOGIN_RESP = 1,
  MessageHeader_MessageType_SERVICE_REQ = 2,
  MessageHeader_MessageType_SERVICE_RESP = 3,
  MessageHeader_MessageType_IPINFO_REQ = 4,
  MessageHeader_MessageType_IPINFO_RESP = 5,
  MessageHeader_MessageType_ALARMINFO_REQ = 6,
  MessageHeader_MessageType_ALARMINFO_RESP = 7,
  MessageHeader_MessageType_HEARTBEAT_REQ = 8,
  MessageHeader_MessageType_HEARTBEAT_RESP = 9
};
bool MessageHeader_MessageType_IsValid(int value);
constexpr MessageHeader_MessageType MessageHeader_MessageType_MessageType_MIN = MessageHeader_MessageType_LOGIN_REQ;
constexpr MessageHeader_MessageType MessageHeader_MessageType_MessageType_MAX = MessageHeader_MessageType_HEARTBEAT_RESP;
constexpr int MessageHeader_MessageType_MessageType_ARRAYSIZE = MessageHeader_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_MessageType_descriptor();
template<typename T>
inline const std::string& MessageHeader_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_MessageType_descriptor(), enum_t_value);
}
inline bool MessageHeader_MessageType_Parse(
    const std::string& name, MessageHeader_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_MessageType>(
    MessageHeader_MessageType_descriptor(), name, value);
}
enum MessageBody_MessageAlarmType : int {
  MessageBody_MessageAlarmType_ALARM_NONE = 0,
  MessageBody_MessageAlarmType_ALARM_KEY = 1,
  MessageBody_MessageAlarmType_ALARM_FIRE = 2,
  MessageBody_MessageAlarmType_ALARM_INVADE = 3,
  MessageBody_MessageAlarmType_ALARM_SMOG = 4
};
bool MessageBody_MessageAlarmType_IsValid(int value);
constexpr MessageBody_MessageAlarmType MessageBody_MessageAlarmType_MessageAlarmType_MIN = MessageBody_MessageAlarmType_ALARM_NONE;
constexpr MessageBody_MessageAlarmType MessageBody_MessageAlarmType_MessageAlarmType_MAX = MessageBody_MessageAlarmType_ALARM_SMOG;
constexpr int MessageBody_MessageAlarmType_MessageAlarmType_ARRAYSIZE = MessageBody_MessageAlarmType_MessageAlarmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageBody_MessageAlarmType_descriptor();
template<typename T>
inline const std::string& MessageBody_MessageAlarmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageBody_MessageAlarmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageBody_MessageAlarmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageBody_MessageAlarmType_descriptor(), enum_t_value);
}
inline bool MessageBody_MessageAlarmType_Parse(
    const std::string& name, MessageBody_MessageAlarmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageBody_MessageAlarmType>(
    MessageBody_MessageAlarmType_descriptor(), name, value);
}
// ===================================================================

class MessageBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageBase) */ {
 public:
  MessageBase();
  virtual ~MessageBase();

  MessageBase(const MessageBase& from);
  MessageBase(MessageBase&& from) noexcept
    : MessageBase() {
    *this = ::std::move(from);
  }

  inline MessageBase& operator=(const MessageBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBase& operator=(MessageBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBase* internal_default_instance() {
    return reinterpret_cast<const MessageBase*>(
               &_MessageBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageBase& a, MessageBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBase* New() const final {
    return CreateMaybeMessage<MessageBase>(nullptr);
  }

  MessageBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBase& from);
  void MergeFrom(const MessageBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // required .MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::MessageHeader& header() const;
  ::MessageHeader* release_header();
  ::MessageHeader* mutable_header();
  void set_allocated_header(::MessageHeader* header);
  private:
  const ::MessageHeader& _internal_header() const;
  ::MessageHeader* _internal_mutable_header();
  public:

  // optional .MessageBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::MessageBody& body() const;
  ::MessageBody* release_body();
  ::MessageBody* mutable_body();
  void set_allocated_body(::MessageBody* body);
  private:
  const ::MessageBody& _internal_body() const;
  ::MessageBody* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:MessageBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::MessageHeader* header_;
  ::MessageBody* body_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageHeader_MessageType MessageType;
  static constexpr MessageType LOGIN_REQ =
    MessageHeader_MessageType_LOGIN_REQ;
  static constexpr MessageType LOGIN_RESP =
    MessageHeader_MessageType_LOGIN_RESP;
  static constexpr MessageType SERVICE_REQ =
    MessageHeader_MessageType_SERVICE_REQ;
  static constexpr MessageType SERVICE_RESP =
    MessageHeader_MessageType_SERVICE_RESP;
  static constexpr MessageType IPINFO_REQ =
    MessageHeader_MessageType_IPINFO_REQ;
  static constexpr MessageType IPINFO_RESP =
    MessageHeader_MessageType_IPINFO_RESP;
  static constexpr MessageType ALARMINFO_REQ =
    MessageHeader_MessageType_ALARMINFO_REQ;
  static constexpr MessageType ALARMINFO_RESP =
    MessageHeader_MessageType_ALARMINFO_RESP;
  static constexpr MessageType HEARTBEAT_REQ =
    MessageHeader_MessageType_HEARTBEAT_REQ;
  static constexpr MessageType HEARTBEAT_RESP =
    MessageHeader_MessageType_HEARTBEAT_RESP;
  static inline bool MessageType_IsValid(int value) {
    return MessageHeader_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    MessageHeader_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    MessageHeader_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    MessageHeader_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return MessageHeader_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return MessageHeader_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return MessageHeader_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // required .MessageHeader.MessageType type = 1 [default = LOGIN_REQ];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::MessageHeader_MessageType type() const;
  void set_type(::MessageHeader_MessageType value);
  private:
  ::MessageHeader_MessageType _internal_type() const;
  void _internal_set_type(::MessageHeader_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MessageBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageBody) */ {
 public:
  MessageBody();
  virtual ~MessageBody();

  MessageBody(const MessageBody& from);
  MessageBody(MessageBody&& from) noexcept
    : MessageBody() {
    *this = ::std::move(from);
  }

  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
               &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageBody& a, MessageBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBody* New() const final {
    return CreateMaybeMessage<MessageBody>(nullptr);
  }

  MessageBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBody& from);
  void MergeFrom(const MessageBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageBody_MessageAlarmType MessageAlarmType;
  static constexpr MessageAlarmType ALARM_NONE =
    MessageBody_MessageAlarmType_ALARM_NONE;
  static constexpr MessageAlarmType ALARM_KEY =
    MessageBody_MessageAlarmType_ALARM_KEY;
  static constexpr MessageAlarmType ALARM_FIRE =
    MessageBody_MessageAlarmType_ALARM_FIRE;
  static constexpr MessageAlarmType ALARM_INVADE =
    MessageBody_MessageAlarmType_ALARM_INVADE;
  static constexpr MessageAlarmType ALARM_SMOG =
    MessageBody_MessageAlarmType_ALARM_SMOG;
  static inline bool MessageAlarmType_IsValid(int value) {
    return MessageBody_MessageAlarmType_IsValid(value);
  }
  static constexpr MessageAlarmType MessageAlarmType_MIN =
    MessageBody_MessageAlarmType_MessageAlarmType_MIN;
  static constexpr MessageAlarmType MessageAlarmType_MAX =
    MessageBody_MessageAlarmType_MessageAlarmType_MAX;
  static constexpr int MessageAlarmType_ARRAYSIZE =
    MessageBody_MessageAlarmType_MessageAlarmType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageAlarmType_descriptor() {
    return MessageBody_MessageAlarmType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageAlarmType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageAlarmType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageAlarmType_Name.");
    return MessageBody_MessageAlarmType_Name(enum_t_value);
  }
  static inline bool MessageAlarmType_Parse(const std::string& name,
      MessageAlarmType* value) {
    return MessageBody_MessageAlarmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRoomInfoFieldNumber = 2,
    kAlarmFieldNumber = 1,
  };
  // optional string data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .MessageRoomInfo roomInfo = 2;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::MessageRoomInfo& roominfo() const;
  ::MessageRoomInfo* release_roominfo();
  ::MessageRoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::MessageRoomInfo* roominfo);
  private:
  const ::MessageRoomInfo& _internal_roominfo() const;
  ::MessageRoomInfo* _internal_mutable_roominfo();
  public:

  // optional .MessageBody.MessageAlarmType alarm = 1 [default = ALARM_NONE];
  bool has_alarm() const;
  private:
  bool _internal_has_alarm() const;
  public:
  void clear_alarm();
  ::MessageBody_MessageAlarmType alarm() const;
  void set_alarm(::MessageBody_MessageAlarmType value);
  private:
  ::MessageBody_MessageAlarmType _internal_alarm() const;
  void _internal_set_alarm(::MessageBody_MessageAlarmType value);
  public:

  // @@protoc_insertion_point(class_scope:MessageBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::MessageRoomInfo* roominfo_;
  int alarm_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MessageRoomInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageRoomInfo) */ {
 public:
  MessageRoomInfo();
  virtual ~MessageRoomInfo();

  MessageRoomInfo(const MessageRoomInfo& from);
  MessageRoomInfo(MessageRoomInfo&& from) noexcept
    : MessageRoomInfo() {
    *this = ::std::move(from);
  }

  inline MessageRoomInfo& operator=(const MessageRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRoomInfo& operator=(MessageRoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRoomInfo* internal_default_instance() {
    return reinterpret_cast<const MessageRoomInfo*>(
               &_MessageRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageRoomInfo& a, MessageRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRoomInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRoomInfo* New() const final {
    return CreateMaybeMessage<MessageRoomInfo>(nullptr);
  }

  MessageRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRoomInfo& from);
  void MergeFrom(const MessageRoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageRoomInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityFieldNumber = 1,
    kBuildingPartFieldNumber = 2,
    kBuildingIdFieldNumber = 3,
    kCellIdFieldNumber = 4,
    kRoomIdFieldNumber = 5,
    kAttachmentFieldNumber = 6,
  };
  // optional string community = 1;
  bool has_community() const;
  private:
  bool _internal_has_community() const;
  public:
  void clear_community();
  const std::string& community() const;
  void set_community(const std::string& value);
  void set_community(std::string&& value);
  void set_community(const char* value);
  void set_community(const char* value, size_t size);
  std::string* mutable_community();
  std::string* release_community();
  void set_allocated_community(std::string* community);
  private:
  const std::string& _internal_community() const;
  void _internal_set_community(const std::string& value);
  std::string* _internal_mutable_community();
  public:

  // optional string building_part = 2;
  bool has_building_part() const;
  private:
  bool _internal_has_building_part() const;
  public:
  void clear_building_part();
  const std::string& building_part() const;
  void set_building_part(const std::string& value);
  void set_building_part(std::string&& value);
  void set_building_part(const char* value);
  void set_building_part(const char* value, size_t size);
  std::string* mutable_building_part();
  std::string* release_building_part();
  void set_allocated_building_part(std::string* building_part);
  private:
  const std::string& _internal_building_part() const;
  void _internal_set_building_part(const std::string& value);
  std::string* _internal_mutable_building_part();
  public:

  // optional string building_id = 3;
  bool has_building_id() const;
  private:
  bool _internal_has_building_id() const;
  public:
  void clear_building_id();
  const std::string& building_id() const;
  void set_building_id(const std::string& value);
  void set_building_id(std::string&& value);
  void set_building_id(const char* value);
  void set_building_id(const char* value, size_t size);
  std::string* mutable_building_id();
  std::string* release_building_id();
  void set_allocated_building_id(std::string* building_id);
  private:
  const std::string& _internal_building_id() const;
  void _internal_set_building_id(const std::string& value);
  std::string* _internal_mutable_building_id();
  public:

  // optional string cell_id = 4;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  const std::string& cell_id() const;
  void set_cell_id(const std::string& value);
  void set_cell_id(std::string&& value);
  void set_cell_id(const char* value);
  void set_cell_id(const char* value, size_t size);
  std::string* mutable_cell_id();
  std::string* release_cell_id();
  void set_allocated_cell_id(std::string* cell_id);
  private:
  const std::string& _internal_cell_id() const;
  void _internal_set_cell_id(const std::string& value);
  std::string* _internal_mutable_cell_id();
  public:

  // optional string room_id = 5;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  const std::string& room_id() const;
  void set_room_id(const std::string& value);
  void set_room_id(std::string&& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  std::string* mutable_room_id();
  std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // optional string attachment = 6;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const std::string& attachment() const;
  void set_attachment(const std::string& value);
  void set_attachment(std::string&& value);
  void set_attachment(const char* value);
  void set_attachment(const char* value, size_t size);
  std::string* mutable_attachment();
  std::string* release_attachment();
  void set_allocated_attachment(std::string* attachment);
  private:
  const std::string& _internal_attachment() const;
  void _internal_set_attachment(const std::string& value);
  std::string* _internal_mutable_attachment();
  public:

  // @@protoc_insertion_point(class_scope:MessageRoomInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr building_part_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr building_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachment_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageBase

// required .MessageHeader header = 1;
inline bool MessageBase::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool MessageBase::has_header() const {
  return _internal_has_header();
}
inline void MessageBase::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::MessageHeader& MessageBase::_internal_header() const {
  const ::MessageHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageHeader*>(
      &::_MessageHeader_default_instance_);
}
inline const ::MessageHeader& MessageBase::header() const {
  // @@protoc_insertion_point(field_get:MessageBase.header)
  return _internal_header();
}
inline ::MessageHeader* MessageBase::release_header() {
  // @@protoc_insertion_point(field_release:MessageBase.header)
  _has_bits_[0] &= ~0x00000001u;
  ::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::MessageHeader* MessageBase::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::MessageHeader* MessageBase::mutable_header() {
  // @@protoc_insertion_point(field_mutable:MessageBase.header)
  return _internal_mutable_header();
}
inline void MessageBase::set_allocated_header(::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:MessageBase.header)
}

// optional .MessageBody body = 2;
inline bool MessageBase::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool MessageBase::has_body() const {
  return _internal_has_body();
}
inline void MessageBase::clear_body() {
  if (body_ != nullptr) body_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MessageBody& MessageBase::_internal_body() const {
  const ::MessageBody* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageBody*>(
      &::_MessageBody_default_instance_);
}
inline const ::MessageBody& MessageBase::body() const {
  // @@protoc_insertion_point(field_get:MessageBase.body)
  return _internal_body();
}
inline ::MessageBody* MessageBase::release_body() {
  // @@protoc_insertion_point(field_release:MessageBase.body)
  _has_bits_[0] &= ~0x00000002u;
  ::MessageBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::MessageBody* MessageBase::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageBody>(GetArenaNoVirtual());
    body_ = p;
  }
  return body_;
}
inline ::MessageBody* MessageBase::mutable_body() {
  // @@protoc_insertion_point(field_mutable:MessageBase.body)
  return _internal_mutable_body();
}
inline void MessageBase::set_allocated_body(::MessageBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:MessageBase.body)
}

// -------------------------------------------------------------------

// MessageHeader

// required .MessageHeader.MessageType type = 1 [default = LOGIN_REQ];
inline bool MessageHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageHeader::has_type() const {
  return _internal_has_type();
}
inline void MessageHeader::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::MessageHeader_MessageType MessageHeader::_internal_type() const {
  return static_cast< ::MessageHeader_MessageType >(type_);
}
inline ::MessageHeader_MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.type)
  return _internal_type();
}
inline void MessageHeader::_internal_set_type(::MessageHeader_MessageType value) {
  assert(::MessageHeader_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void MessageHeader::set_type(::MessageHeader_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MessageHeader.type)
}

// -------------------------------------------------------------------

// MessageBody

// optional .MessageBody.MessageAlarmType alarm = 1 [default = ALARM_NONE];
inline bool MessageBody::_internal_has_alarm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageBody::has_alarm() const {
  return _internal_has_alarm();
}
inline void MessageBody::clear_alarm() {
  alarm_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::MessageBody_MessageAlarmType MessageBody::_internal_alarm() const {
  return static_cast< ::MessageBody_MessageAlarmType >(alarm_);
}
inline ::MessageBody_MessageAlarmType MessageBody::alarm() const {
  // @@protoc_insertion_point(field_get:MessageBody.alarm)
  return _internal_alarm();
}
inline void MessageBody::_internal_set_alarm(::MessageBody_MessageAlarmType value) {
  assert(::MessageBody_MessageAlarmType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  alarm_ = value;
}
inline void MessageBody::set_alarm(::MessageBody_MessageAlarmType value) {
  _internal_set_alarm(value);
  // @@protoc_insertion_point(field_set:MessageBody.alarm)
}

// optional .MessageRoomInfo roomInfo = 2;
inline bool MessageBody::_internal_has_roominfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || roominfo_ != nullptr);
  return value;
}
inline bool MessageBody::has_roominfo() const {
  return _internal_has_roominfo();
}
inline void MessageBody::clear_roominfo() {
  if (roominfo_ != nullptr) roominfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MessageRoomInfo& MessageBody::_internal_roominfo() const {
  const ::MessageRoomInfo* p = roominfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageRoomInfo*>(
      &::_MessageRoomInfo_default_instance_);
}
inline const ::MessageRoomInfo& MessageBody::roominfo() const {
  // @@protoc_insertion_point(field_get:MessageBody.roomInfo)
  return _internal_roominfo();
}
inline ::MessageRoomInfo* MessageBody::release_roominfo() {
  // @@protoc_insertion_point(field_release:MessageBody.roomInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::MessageRoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::MessageRoomInfo* MessageBody::_internal_mutable_roominfo() {
  _has_bits_[0] |= 0x00000002u;
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageRoomInfo>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::MessageRoomInfo* MessageBody::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:MessageBody.roomInfo)
  return _internal_mutable_roominfo();
}
inline void MessageBody::set_allocated_roominfo(::MessageRoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:MessageBody.roomInfo)
}

// optional string data = 3;
inline bool MessageBody::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageBody::has_data() const {
  return _internal_has_data();
}
inline void MessageBody::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageBody::data() const {
  // @@protoc_insertion_point(field_get:MessageBody.data)
  return _internal_data();
}
inline void MessageBody::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:MessageBody.data)
}
inline std::string* MessageBody::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MessageBody.data)
  return _internal_mutable_data();
}
inline const std::string& MessageBody::_internal_data() const {
  return data_.GetNoArena();
}
inline void MessageBody::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageBody::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageBody.data)
}
inline void MessageBody::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBody.data)
}
inline void MessageBody::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBody.data)
}
inline std::string* MessageBody::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageBody::release_data() {
  // @@protoc_insertion_point(field_release:MessageBody.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBody::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:MessageBody.data)
}

// -------------------------------------------------------------------

// MessageRoomInfo

// optional string community = 1;
inline bool MessageRoomInfo::_internal_has_community() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_community() const {
  return _internal_has_community();
}
inline void MessageRoomInfo::clear_community() {
  community_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageRoomInfo::community() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.community)
  return _internal_community();
}
inline void MessageRoomInfo::set_community(const std::string& value) {
  _internal_set_community(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.community)
}
inline std::string* MessageRoomInfo::mutable_community() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.community)
  return _internal_mutable_community();
}
inline const std::string& MessageRoomInfo::_internal_community() const {
  return community_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_community(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  community_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_community(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  community_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.community)
}
inline void MessageRoomInfo::set_community(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  community_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.community)
}
inline void MessageRoomInfo::set_community(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  community_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.community)
}
inline std::string* MessageRoomInfo::_internal_mutable_community() {
  _has_bits_[0] |= 0x00000001u;
  return community_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_community() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.community)
  if (!_internal_has_community()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return community_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_community(std::string* community) {
  if (community != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  community_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.community)
}

// optional string building_part = 2;
inline bool MessageRoomInfo::_internal_has_building_part() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_building_part() const {
  return _internal_has_building_part();
}
inline void MessageRoomInfo::clear_building_part() {
  building_part_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageRoomInfo::building_part() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.building_part)
  return _internal_building_part();
}
inline void MessageRoomInfo::set_building_part(const std::string& value) {
  _internal_set_building_part(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.building_part)
}
inline std::string* MessageRoomInfo::mutable_building_part() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.building_part)
  return _internal_mutable_building_part();
}
inline const std::string& MessageRoomInfo::_internal_building_part() const {
  return building_part_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_building_part(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  building_part_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_building_part(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  building_part_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.building_part)
}
inline void MessageRoomInfo::set_building_part(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  building_part_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.building_part)
}
inline void MessageRoomInfo::set_building_part(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  building_part_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.building_part)
}
inline std::string* MessageRoomInfo::_internal_mutable_building_part() {
  _has_bits_[0] |= 0x00000002u;
  return building_part_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_building_part() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.building_part)
  if (!_internal_has_building_part()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return building_part_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_building_part(std::string* building_part) {
  if (building_part != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  building_part_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), building_part);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.building_part)
}

// optional string building_id = 3;
inline bool MessageRoomInfo::_internal_has_building_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_building_id() const {
  return _internal_has_building_id();
}
inline void MessageRoomInfo::clear_building_id() {
  building_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MessageRoomInfo::building_id() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.building_id)
  return _internal_building_id();
}
inline void MessageRoomInfo::set_building_id(const std::string& value) {
  _internal_set_building_id(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.building_id)
}
inline std::string* MessageRoomInfo::mutable_building_id() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.building_id)
  return _internal_mutable_building_id();
}
inline const std::string& MessageRoomInfo::_internal_building_id() const {
  return building_id_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_building_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  building_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_building_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  building_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.building_id)
}
inline void MessageRoomInfo::set_building_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  building_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.building_id)
}
inline void MessageRoomInfo::set_building_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  building_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.building_id)
}
inline std::string* MessageRoomInfo::_internal_mutable_building_id() {
  _has_bits_[0] |= 0x00000004u;
  return building_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_building_id() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.building_id)
  if (!_internal_has_building_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return building_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_building_id(std::string* building_id) {
  if (building_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  building_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), building_id);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.building_id)
}

// optional string cell_id = 4;
inline bool MessageRoomInfo::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void MessageRoomInfo::clear_cell_id() {
  cell_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MessageRoomInfo::cell_id() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.cell_id)
  return _internal_cell_id();
}
inline void MessageRoomInfo::set_cell_id(const std::string& value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.cell_id)
}
inline std::string* MessageRoomInfo::mutable_cell_id() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.cell_id)
  return _internal_mutable_cell_id();
}
inline const std::string& MessageRoomInfo::_internal_cell_id() const {
  return cell_id_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_cell_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cell_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_cell_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  cell_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.cell_id)
}
inline void MessageRoomInfo::set_cell_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  cell_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.cell_id)
}
inline void MessageRoomInfo::set_cell_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  cell_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.cell_id)
}
inline std::string* MessageRoomInfo::_internal_mutable_cell_id() {
  _has_bits_[0] |= 0x00000008u;
  return cell_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_cell_id() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.cell_id)
  if (!_internal_has_cell_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return cell_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_cell_id(std::string* cell_id) {
  if (cell_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cell_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_id);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.cell_id)
}

// optional string room_id = 5;
inline bool MessageRoomInfo::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_room_id() const {
  return _internal_has_room_id();
}
inline void MessageRoomInfo::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MessageRoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.room_id)
  return _internal_room_id();
}
inline void MessageRoomInfo::set_room_id(const std::string& value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.room_id)
}
inline std::string* MessageRoomInfo::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& MessageRoomInfo::_internal_room_id() const {
  return room_id_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_room_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_room_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  room_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.room_id)
}
inline void MessageRoomInfo::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.room_id)
}
inline void MessageRoomInfo::set_room_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.room_id)
}
inline std::string* MessageRoomInfo::_internal_mutable_room_id() {
  _has_bits_[0] |= 0x00000010u;
  return room_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.room_id)
  if (!_internal_has_room_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return room_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  room_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.room_id)
}

// optional string attachment = 6;
inline bool MessageRoomInfo::_internal_has_attachment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MessageRoomInfo::has_attachment() const {
  return _internal_has_attachment();
}
inline void MessageRoomInfo::clear_attachment() {
  attachment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& MessageRoomInfo::attachment() const {
  // @@protoc_insertion_point(field_get:MessageRoomInfo.attachment)
  return _internal_attachment();
}
inline void MessageRoomInfo::set_attachment(const std::string& value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:MessageRoomInfo.attachment)
}
inline std::string* MessageRoomInfo::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:MessageRoomInfo.attachment)
  return _internal_mutable_attachment();
}
inline const std::string& MessageRoomInfo::_internal_attachment() const {
  return attachment_.GetNoArena();
}
inline void MessageRoomInfo::_internal_set_attachment(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageRoomInfo::set_attachment(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  attachment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageRoomInfo.attachment)
}
inline void MessageRoomInfo::set_attachment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageRoomInfo.attachment)
}
inline void MessageRoomInfo::set_attachment(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  attachment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageRoomInfo.attachment)
}
inline std::string* MessageRoomInfo::_internal_mutable_attachment() {
  _has_bits_[0] |= 0x00000020u;
  return attachment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRoomInfo::release_attachment() {
  // @@protoc_insertion_point(field_release:MessageRoomInfo.attachment)
  if (!_internal_has_attachment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return attachment_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRoomInfo::set_allocated_attachment(std::string* attachment) {
  if (attachment != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  attachment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachment);
  // @@protoc_insertion_point(field_set_allocated:MessageRoomInfo.attachment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageHeader_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_MessageType>() {
  return ::MessageHeader_MessageType_descriptor();
}
template <> struct is_proto_enum< ::MessageBody_MessageAlarmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageBody_MessageAlarmType>() {
  return ::MessageBody_MessageAlarmType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
